{"version":3,"file":"1.17cae5e9.js","sources":["../../../../../../node_modules/@sveltejs/kit/src/runtime/app/stores.js","../../../../../../src/routes/+error.svelte"],"sourcesContent":["import { getContext } from 'svelte';\nimport { browser } from './environment.js';\nimport { stores as browser_stores } from '../client/singletons.js';\n\n/**\n * A function that returns all of the contextual stores. On the server, this must be called during component initialization.\n * Only use this if you need to defer store subscription until after the component has mounted, for some reason.\n */\nexport const getStores = () => {\n\tconst stores = browser ? browser_stores : getContext('__svelte__');\n\n\treturn {\n\t\t/** @type {typeof page} */\n\t\tpage: {\n\t\t\tsubscribe: stores.page.subscribe\n\t\t},\n\t\t/** @type {typeof navigating} */\n\t\tnavigating: {\n\t\t\tsubscribe: stores.navigating.subscribe\n\t\t},\n\t\t/** @type {typeof updated} */\n\t\tupdated: stores.updated\n\t};\n};\n\n/**\n * A readable store whose value contains page data.\n *\n * On the server, this store can only be subscribed to during component initialization. In the browser, it can be subscribed to at any time.\n *\n * @type {import('svelte/store').Readable<import('@sveltejs/kit').Page>}\n */\nexport const page = {\n\tsubscribe(fn) {\n\t\tconst store = __SVELTEKIT_DEV__ ? get_store('page') : getStores().page;\n\t\treturn store.subscribe(fn);\n\t}\n};\n\n/**\n * A readable store.\n * When navigating starts, its value is a `Navigation` object with `from`, `to`, `type` and (if `type === 'popstate'`) `delta` properties.\n * When navigating finishes, its value reverts to `null`.\n *\n * On the server, this store can only be subscribed to during component initialization. In the browser, it can be subscribed to at any time.\n * @type {import('svelte/store').Readable<import('@sveltejs/kit').Navigation | null>}\n */\nexport const navigating = {\n\tsubscribe(fn) {\n\t\tconst store = __SVELTEKIT_DEV__ ? get_store('navigating') : getStores().navigating;\n\t\treturn store.subscribe(fn);\n\t}\n};\n\n/**\n * A readable store whose initial value is `false`. If [`version.pollInterval`](https://kit.svelte.dev/docs/configuration#version) is a non-zero value, SvelteKit will poll for new versions of the app and update the store value to `true` when it detects one. `updated.check()` will force an immediate check, regardless of polling.\n *\n * On the server, this store can only be subscribed to during component initialization. In the browser, it can be subscribed to at any time.\n * @type {import('svelte/store').Readable<boolean> & { check(): Promise<boolean> }}\n */\nexport const updated = {\n\tsubscribe(fn) {\n\t\tconst store = __SVELTEKIT_DEV__ ? get_store('updated') : getStores().updated;\n\n\t\tif (browser) {\n\t\t\tupdated.check = store.check;\n\t\t}\n\n\t\treturn store.subscribe(fn);\n\t},\n\tcheck: () => {\n\t\tthrow new Error(\n\t\t\tbrowser\n\t\t\t\t? 'Cannot check updated store before subscribing'\n\t\t\t\t: 'Can only check updated store in browser'\n\t\t);\n\t}\n};\n\n/**\n * @template {keyof ReturnType<typeof getStores>} Name\n * @param {Name} name\n * @returns {ReturnType<typeof getStores>[Name]}\n */\nfunction get_store(name) {\n\ttry {\n\t\treturn getStores()[name];\n\t} catch (e) {\n\t\tthrow new Error(\n\t\t\t`Cannot subscribe to '${name}' store on the server outside of a Svelte component, as it is bound to the current request via component context. This prevents state from leaking between users.` +\n\t\t\t\t'For more information, see https://kit.svelte.dev/docs/state-management#avoid-shared-state-on-the-server'\n\t\t);\n\t}\n}\n","<script>\n  import { page } from '$app/stores';\n</script>\n\n<div class=\"error-container\">\n  <h1>Error {$page.status}</h1>\n  <p class=\"error-message\">{$page.error?.message || 'Something went wrong'}</p>\n  <p>Please try refreshing the page. If the problem persists, check the console for more details.</p>\n  <a href=\"/\">Return to home page</a>\n</div>\n\n<style>\n  .error-container {\n    max-width: 800px;\n    margin: 100px auto;\n    padding: 2rem;\n    text-align: center;\n    background-color: #fff;\n    border-radius: 8px;\n    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n  }\n  \n  h1 {\n    font-size: 3rem;\n    margin-bottom: 1rem;\n  }\n  \n  .error-message {\n    font-size: 1.2rem;\n    margin-bottom: 2rem;\n    padding: 1rem;\n    border-radius: 4px;\n    background-color: #f8d7da;\n    color: #721c24;\n  }\n  \n  a {\n    display: inline-block;\n    margin-top: 1rem;\n    padding: 0.75rem 1.5rem;\n    background-color: #007bff;\n    color: white;\n    text-decoration: none;\n    border-radius: 4px;\n    font-weight: bold;\n  }\n  \n  a:hover {\n    background-color: #0069d9;\n  }\n</style>\n"],"names":["getStores","stores","browser_stores","page","fn","t1_value","ctx","t3_value","_a","insert_hydration","target","div","anchor","append_hydration","h1","p0","p1","a","dirty","set_data","t1","t3"],"mappings":"yQAQO,MAAMA,EAAY,IAAM,CAC9B,MAAMC,EAAmBC,EAEzB,MAAO,CAEN,KAAM,CACL,UAAWD,EAAO,KAAK,SACvB,EAED,WAAY,CACX,UAAWA,EAAO,WAAW,SAC7B,EAED,QAASA,EAAO,OAClB,CACA,EASaE,EAAO,CACnB,UAAUC,EAAI,CAEb,OADsDJ,EAAW,EAAC,KACrD,UAAUI,CAAE,CACzB,CACF,gCChCaC,EAAAC,KAAM,OAAM,SACGC,KAAAC,EAAAF,EAAM,CAAA,EAAA,QAAN,YAAAE,EAAa,UAAW,wBAAsB,0KADpE,QAAM,uLAAN,QAAM,odADZC,EAKKC,EAAAC,EAAAC,CAAA,EAJHC,EAA4BF,EAAAG,CAAA,uBAC5BD,EAA4EF,EAAAI,CAAA,gBAC5EF,EAAkGF,EAAAK,CAAA,SAClGH,EAAkCF,EAAAM,CAAA,kBAHvBC,EAAA,GAAAb,KAAAA,EAAAC,KAAM,OAAM,KAAAa,EAAAC,EAAAf,CAAA,EACGa,EAAA,GAAAX,KAAAA,KAAAC,EAAAF,EAAM,CAAA,EAAA,QAAN,YAAAE,EAAa,UAAW,wBAAsB,KAAAW,EAAAE,EAAAd,CAAA","x_google_ignoreList":[0]}